module vram_to_bram(
    input clock,
    input focus_switch,     // stores still frame in bram
    input [10:0] hcount,
    input [9:0] vcount,
    input [23:0] vr_pixel_color,
    output [7:0] bram_dout,
    output in_display,
    output 
  );
  
  parameter IDLE = 0; // when focus switch is off
  parameter WRITING_FRAME = 1;
  parameter READING_FRAME = 2;
  
  assign in_display = hcount < 640 && vcount < 400;
  
  wire [7:0] frame_bram_din, frame_bram_dout;
  wire [17:0] frame_bram_addr;
  wire frame_bram_wea;
  
  reg switch_high = 0;
  reg started = 0;
  reg [17:0] my_addr_q = 0;
  reg pixel_d = 0;
  
  reg sw_ntsc_d;
  
  reg [17:0] write_counter = 0; 
  reg [17:0] read_counter = 0; 
  reg bram_loaded = 0;
  
  wire frame_loaded = (write_counter == 18'd255999);
  
  bram_ip mybram(clk, my_din, my_addr, my_wea, my_dout);

  assign my_wea = !frame_loaded && started && in_display;  
  assign my_addr = (!frame_loaded) ? write_counter : read_counter;
  
  
  assign my_din = {vr_pixel_color[23:21],vr_pixel_color[15:13],vr_pixel_color[7:6]};

  always @(posedge clk) begin
    //if (!load_bram && stored && (my_addr == 0)) load_bram <= 1'b1;
    //bram_counter <= bram_loaded ? bram_counter : bram_counter+1'b1;
    sw_ntsc_d <= sw_ntsc;
    
    if (!switch_high) begin
      write_counter <= 0;
      read_counter <= 0;
      if (sw_ntsc_d && !sw_ntsc) switch_high <= 1;
    end else begin
      if (frame_loaded && in_display) read_counter <= (read_counter == 18'd255999) ? 0 : read_counter+1'b1;
      if (!sw_ntsc_d && sw_ntsc) switch_high <= 0;
      
      if (started) begin
        if (my_wea) write_counter <= write_counter+1'b1;
        if (frame_loaded) started <= 0;
      end else if ((hcount==0) && (vcount==0)) started <= 1;
    end
  end
  
endmodule

    